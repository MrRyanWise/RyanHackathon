SET search_path TO hackathon;

-- Sch√©ma
DROP SCHEMA IF EXISTS hackathon CASCADE;
CREATE SCHEMA hackathon AUTHORIZATION hackathon;
GRANT ALL PRIVILEGES ON SCHEMA hackathon TO hackathon;


CREATE TABLE compte (
	idcompte		INT				GENERATED BY DEFAULT AS IDENTITY,
	pseudo			VARCHAR(25)		NOT NULL,
	motdepasse		VARCHAR(25) 	NOT NULL,
	email			VARCHAR(100)	NOT NULL,				
	UNIQUE (pseudo),
	UNIQUE (motdepasse),
	PRIMARY KEY (idcompte)
);

CREATE TABLE role (
	idcompte		INT				NOT NULL,
	role			VARCHAR(20)		NOT NULL,
	CHECK( Role IN ('ADMINISTRATEUR','UTILISATEUR','CORRECTEUR','ADMINBIS') ),	
	FOREIGN KEY (idcompte) REFERENCES compte (idcompte),
	PRIMARY KEY (idcompte, role)
);

------------------------------------------------------------
-- Table:  personne
------------------------------------------------------------

CREATE TABLE  personne(
	id         INT GENERATED BY DEFAULT AS IDENTITY ,
	nom        VARCHAR (50) NOT NULL ,
	prenom     VARCHAR (50) ,
	courriel   VARCHAR (50) ,
	Mail       VARCHAR (50) ,
	idcompte   INT NOT NULL, 
	CONSTRAINT  personne_PK PRIMARY KEY (id), 
	FOREIGN KEY (idcompte) REFERENCES   compte(idcompte)
) ;


------------------------------------------------------------
-- Table: admin
------------------------------------------------------------
CREATE TABLE  admin(
	id           INT  NOT NULL ,
	type         VARCHAR (20) NOT NULL ,
	motDePasse   VARCHAR (50) NOT NULL ,
	UNIQUE 		(motDePasse),
	CONSTRAINT admin_PK PRIMARY KEY (id)

	,FOREIGN KEY (id) REFERENCES   personne(id)
) ;


------------------------------------------------------------
-- Table: SuperUser
------------------------------------------------------------
CREATE TABLE  superUser(
	id         INT  NOT NULL ,
	cle        VARCHAR (50) NOT NULL ,
	UNIQUE 		(cle),
	CONSTRAINT SuperUser_PK PRIMARY KEY (id)
	,FOREIGN KEY (id) REFERENCES   personne(id)
) ;


------------------------------------------------------------
-- Table: Correcteur
------------------------------------------------------------
CREATE TABLE  correcteur(
	id           INT  NOT NULL ,
	motDePasse   VARCHAR (50) NOT NULL ,
	specialite   VARCHAR (50) NOT NULL ,
	CONSTRAINT Correcteur_PK PRIMARY KEY (id)
	, FOREIGN KEY (id) REFERENCES   personne(id)
) ;


------------------------------------------------------------
-- Table: hackathon
------------------------------------------------------------
CREATE TABLE  hackathon(
	idHackathon       INT GENERATED BY DEFAULT AS IDENTITY ,
	nomHackathon      VARCHAR (500) NOT NULL ,
	theme             VARCHAR (500)  ,
	problematique     VARCHAR (1000)  ,
	lieu              VARCHAR (100)  ,
	description       VARCHAR (2000)   ,
	nombreParJury     INT   ,
	nombreMinEquipe   INT   ,
	nombreMaxEquipe   INT   ,
	dateDebut         DATE   ,
	heureDebut        TIME   ,
	dateFin           DATE  ,
	HeureFin          TIME   ,
	idSuperUser       INT    NOT NULL,
	CONSTRAINT hackathon_PK PRIMARY KEY (idHackathon)
	, FOREIGN KEY (idSuperUser) REFERENCES  superUser(id)
) ;


------------------------------------------------------------
-- Table: Jury
------------------------------------------------------------
CREATE TABLE  jury(
	idJury        INT  GENERATED BY DEFAULT AS IDENTITY ,
	nomJury       VARCHAR (500) NOT NULL ,
	idHackathon   INT  NOT NULL  ,
	CONSTRAINT Jury_PK PRIMARY KEY (idJury)

	, FOREIGN KEY (idHackathon) REFERENCES  hackathon(idHackathon)
) ;

------------------------------------------------------------
-- Table: Equipe
------------------------------------------------------------
CREATE TABLE  equipe(
	idEquipe       INT GENERATED BY DEFAULT AS IDENTITY ,
	pseudo         VARCHAR (20) NOT NULL ,
	nombreMembre   INT  NOT NULL ,
	lienTravaux    VARCHAR (500) NOT NULL ,
	/*idJury         INT  NOT NULL ,
	idHackathon    INT  NOT NULL  ,*/
	CONSTRAINT Equipe_PK PRIMARY KEY (idEquipe)

	/*, FOREIGN KEY (idJury) REFERENCES  jury(idJury)
	, FOREIGN KEY (idHackathon) REFERENCES  hackathon(idHackathon)*/
) ;

------------------------------------------------------------
-- Table: Participant
------------------------------------------------------------
CREATE TABLE  participant(
	id           INT NOT NULL ,
	idEquipe     INT  NOT NULL  ,
	specialite   VARCHAR (50) ,
	CONSTRAINT Participant_PK PRIMARY KEY (id)

	, FOREIGN KEY (id) REFERENCES   personne(id)
	, FOREIGN KEY (idEquipe) REFERENCES  equipe(idEquipe)
) ;

------------------------------------------------------------
-- Table: composer
------------------------------------------------------------
CREATE TABLE  composer(
	idJury   INT  NOT NULL ,
	id       INT  NOT NULL  ,
	CONSTRAINT composer_PK PRIMARY KEY (idJury,id)

	, FOREIGN KEY (idJury) REFERENCES  jury(idJury)
	, FOREIGN KEY (id) REFERENCES  correcteur(id)
) ;

------------------------------------------------------------
-- Table: evaluer
------------------------------------------------------------
CREATE TABLE  evaluer(
	idEquipe   INT  NOT NULL ,
	id         INT  NOT NULL ,
	note       INT  NOT NULL  ,
	CONSTRAINT evaluer_PK PRIMARY KEY (idEquipe,id)

	, FOREIGN KEY (idEquipe) REFERENCES  equipe(idEquipe)
	, FOREIGN KEY (id) REFERENCES  correcteur(id)
) ;

------------------------------------------------------------
-- Table: intervenir
------------------------------------------------------------
CREATE TABLE  intervenir(
	idHackathon   INT  NOT NULL ,
	id            INT  NOT NULL  ,
	CONSTRAINT intervenir_PK PRIMARY KEY (idHackathon,id)

	, FOREIGN KEY (idHackathon) REFERENCES  hackathon(idHackathon)
	, FOREIGN KEY (id) REFERENCES   personne(id)
) ;
